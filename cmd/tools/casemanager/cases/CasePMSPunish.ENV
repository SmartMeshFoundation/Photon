[COMMON]
case_name=CasePMSPunish
token_network_address=new
debug = false

[TOKEN]
T0=new

[NODE]
N0=0x3DE45fEbBD988b6E417E4Ebd2C69E42630FeFBF0,127.0.0.1:6000
N1=0x97251dDfE70ea44be0E5156C4E3AaDD30328C6a5,127.0.0.1:6001
N2=0x2b0C1545DBBEC6BFe7B26c699b74EB3513e52724,127.0.0.1:6002
N3=0xaaAA7F676a677c0B3C8E4Bb14aEC7Be61365acfE,127.0.0.1:6003

[CHANNEL]
C12=N1,N2,T0,100,100,600
C23=N2,N3,T0,20,50,600

[DESCRIPTION]
# 构建带惩罚的锁，对方乘机作恶
# 路由n1-n2-n3 节点n1向节点n3发起指定secret的交易，mtr金额为30，
# 节点n1设置崩溃条件为EventSendAnnouncedDisposedResponseBefore，通道n1-n2之间就构成了一个节点n2声明放弃的锁
# 在节点n1崩溃后，节点n2退出photon,重启节点n1，节点n1委托pms(带有punish的balance_proof)
# 节点n1委托完后，断开网络连接，节点n2重新启动，强制unlock之前声明放弃的锁
# 测试：节点n2将受到惩罚：其在通道1-2上的钱将全部转至节点n1