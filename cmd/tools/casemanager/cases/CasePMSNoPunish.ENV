[COMMON]
case_name=CasePMSNoPunish
token_network_address=new
debug = false

[TOKEN]
T0=new

[NODE]
N0=0x3DE45fEbBD988b6E417E4Ebd2C69E42630FeFBF0,127.0.0.1:6000
N1=0x97251dDfE70ea44be0E5156C4E3AaDD30328C6a5,127.0.0.1:6001
N2=0x2b0C1545DBBEC6BFe7B26c699b74EB3513e52724,127.0.0.1:6002
N3=0xaaAA7F676a677c0B3C8E4Bb14aEC7Be61365acfE,127.0.0.1:6003

[CHANNEL]
# C01=N0,N1,T0,100,100,300
C12=N1,N2,T0,100,100,300
C23=N2,N3,T0,20,50,300

[DESCRIPTION]
# 构建带惩罚的锁，检验PMS不会主动提交放弃的锁，不会被对方惩罚
# 路由1-2-3 节点1向节点3发起指定secret的交易，mtr金额为30，
# 节点1设置崩溃条件为EventSendAnnouncedDisposedResponseBefore，通道1-2之间就构成了一个节点2声明放弃的锁
# 在节点1崩溃后，节点2不断发announcedispose。节点1未响应，节点2有需求断开网络，在退出photon之前，向PMS委托证据（包含已放弃的锁）。
# 重启节点1，节点1不回应AnnouncedDisposedResponse,并在链上注册密码，并关闭通道。
# 节点1关闭通道后，PMS根据收到的证明，在最后时刻不会主动使用已注册的密码解锁已放弃的锁，只提交正确的余额及真实的锁进行解锁
# 测试：节点2不会受到惩罚，双方余额正确